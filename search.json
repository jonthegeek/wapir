[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Web APIs with R",
    "section": "",
    "text": "Welcome\nLast updated: 2024-06-21 08:57:52 CDT\nThis is the website for the work-in-progress book, Web APIs with R. This book will teach you how to work with the web from your R session. This book will be published as part of The R Series from CRC Press.\nThis website is free to use, and is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.\nThe code contained in this book is simultaneously available under the MIT license; this means that you are free to use it in your own packages, as long as you cite the source.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#want-to-help",
    "href": "index.html#want-to-help",
    "title": "Web APIs with R",
    "section": "Want to help?",
    "text": "Want to help?\nI am writing this book in a GitHub repository. Follow the “Edit this page” or “Report an issue” links in the table of contents if you would like to help!",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#the-data-science-learning-community",
    "href": "index.html#the-data-science-learning-community",
    "title": "Web APIs with R",
    "section": "The Data Science Learning Community",
    "text": "The Data Science Learning Community\nIf you would like to discuss the contents of this book (or any other data-related topic), join the Data Science Learning Community Slack.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#code-of-conduct",
    "href": "index.html#code-of-conduct",
    "title": "Web APIs with R",
    "section": "Code of Conduct",
    "text": "Code of Conduct\nPlease note that Web APIs with R is released with a Contributor Code of Conduct. By contributing to this project, you agree to abide by its terms.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "1.1 What will I learn?\nSomewhere in here: Include the overall landscape of web-related packages: rvest, httr(2), plumber, but also RSelenium, chromote, curl, touch on some api-specific packages.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#what-will-i-learn",
    "href": "intro.html#what-will-i-learn",
    "title": "1  Introduction",
    "section": "",
    "text": "1.1.1 Who should read this book?\n\n\n1.1.2 What does each chapter cover?\n\n\n1.1.3 What won’t I learn?\nI like the idea of this section, but I don’t know if it will fit.\n\n\n1.1.4 What should I already know?\nDescribe what we expect people to already know. Include references to other books: R4DS, AdvR, RPkgs, Do4DS, maybe MShiny. Note that each part and/or chapter will describe the prerequisites for that part. Most of those books will be places to find more info or to dive deeper into a topic.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#how-will-i-learn",
    "href": "intro.html#how-will-i-learn",
    "title": "1  Introduction",
    "section": "1.2 How will I learn?",
    "text": "1.2 How will I learn?\nIntroduce the concept of LOs, and why this book is structured around them. Note that normally they’ll be at the beginning of the chapter\n\n1.2.1 Learning Objectives\nAfter you read this chapter, you will be able to:\n\nExplain what an API is.\nDecide whether this book is for you.\n\n\n\n1.2.2 How do I run the code?\nExplain what code looks like here vs to the user. Give a disclaimer that open source software changes so things might change, and that we’ll try to keep the online version up-to-date. Potentially link to additional resources, maybe a book package.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#acknowledgements",
    "href": "intro.html#acknowledgements",
    "title": "1  Introduction",
    "section": "1.3 Acknowledgements",
    "text": "1.3 Acknowledgements\nThis is the acknowledgement that appears in the actual book. RStudio has code to auto-generate it, consider something similar.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#footnotes",
    "href": "intro.html#footnotes",
    "title": "1  Introduction",
    "section": "",
    "text": "API stands for “application programming interface,” but you will almost always see it written as “API.” It’s pronounced “A P I.”↩︎",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "part-get_started.html",
    "href": "part-get_started.html",
    "title": "Get started",
    "section": "",
    "text": "This is an intro to a part.\nThese are the chapters, introduced with a phrase that encapsulates them:\n\nDescribe the chapter. Reference it with a tag.\nDescribe another chapter. Reference it with a tag.\n\nAnd then a sentence or paragraph about any leftovers.",
    "crumbs": [
      "Get started"
    ]
  },
  {
    "objectID": "apis-start.html",
    "href": "apis-start.html",
    "title": "2  Get started with APIs",
    "section": "",
    "text": "2.1 Introduction\n(introduction will be written ~last)",
    "crumbs": [
      "Get started",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Get started with APIs</span>"
    ]
  },
  {
    "objectID": "apis-start.html#introduction",
    "href": "apis-start.html#introduction",
    "title": "2  Get started with APIs",
    "section": "",
    "text": "2.1.1 Learning Objectives\nAfter you read this chapter, you will be able to:\n\nFetch json-formatted data from the web.\nParse nested lists with the {tidyverse}.\n\n\n\n2.1.2 Prerequisites\n(prerequisites will be filled in as I write, if I decide to keep this section)",
    "crumbs": [
      "Get started",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Get started with APIs</span>"
    ]
  },
  {
    "objectID": "schemas.html",
    "href": "schemas.html",
    "title": "3  Quickly parse API responses",
    "section": "",
    "text": "3.1 Introduction\n(introduction will be written ~last)",
    "crumbs": [
      "Get started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Quickly parse API responses</span>"
    ]
  },
  {
    "objectID": "schemas.html#introduction",
    "href": "schemas.html#introduction",
    "title": "3  Quickly parse API responses",
    "section": "",
    "text": "3.1.1 Learning Objectives\nAfter you read this chapter, you will be able to:\n\nParse nested lists with {tibblify}.\nUse an API’s OpenAPI description to determine the expected format of responses.\nParse API responses with {tibblify} and the response description.\n\n\n\n3.1.2 Prerequisites\n(prerequisites will be filled in as I write, if I decide to keep this section)",
    "crumbs": [
      "Get started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Quickly parse API responses</span>"
    ]
  },
  {
    "objectID": "httr2.html",
    "href": "httr2.html",
    "title": "4  Easily access APIs with httr2",
    "section": "",
    "text": "4.1 Introduction\n(introduction will be written ~last)",
    "crumbs": [
      "Get started",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Easily access APIs with httr2</span>"
    ]
  },
  {
    "objectID": "httr2.html#introduction",
    "href": "httr2.html#introduction",
    "title": "4  Easily access APIs with httr2",
    "section": "",
    "text": "4.1.1 Learning Objectives\nAfter you read this chapter, you will be able to:\n\nUse API docs to explore available endpoints.\nFetch data from an API with {httr2}.\nBuild a {httr2} request piece-by-piece.\n\n\n\n4.1.2 Prerequisites\n(prerequisites will be filled in as I write, if I decide to keep this section)\nTODO: Somewhere in here, include something along the line of “Principles.”\n\nMake as few separate requests as possible.\nOnly request what you need (make requests as small as possible).",
    "crumbs": [
      "Get started",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Easily access APIs with httr2</span>"
    ]
  },
  {
    "objectID": "authentication.html",
    "href": "authentication.html",
    "title": "5  Tell APIs who you are",
    "section": "",
    "text": "5.1 Introduction\n(introduction will be written ~last)",
    "crumbs": [
      "Get started",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Tell APIs who you are</span>"
    ]
  },
  {
    "objectID": "authentication.html#introduction",
    "href": "authentication.html#introduction",
    "title": "5  Tell APIs who you are",
    "section": "",
    "text": "5.1.1 Learning Objectives\nAfter you read this chapter, you will be able to:\n\nProvide information in your request about how you’re accessing the API.\nFind authentication information in API docs.\nAuthenticate a request with an API key.\nAuthenticate a request with OAuth.\n\n\n\n5.1.2 Prerequisites\n(prerequisites will be filled in as I write, if I decide to keep this section)",
    "crumbs": [
      "Get started",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Tell APIs who you are</span>"
    ]
  },
  {
    "objectID": "part-get_more_data.html",
    "href": "part-get_more_data.html",
    "title": "Get more data",
    "section": "",
    "text": "This is an intro to a part.\nThese are the chapters, introduced with a phrase that encapsulates them:\n\nDescribe the chapter. Reference it with a tag.\nDescribe another chapter. Reference it with a tag.\n\nAnd then a sentence or paragraph about any leftovers.",
    "crumbs": [
      "Get more data"
    ]
  },
  {
    "objectID": "pagination.html",
    "href": "pagination.html",
    "title": "6  Get a lot of data from APIs",
    "section": "",
    "text": "6.1 Introduction\n(introduction will be written ~last)",
    "crumbs": [
      "Get more data",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Get a lot of data from APIs</span>"
    ]
  },
  {
    "objectID": "pagination.html#introduction",
    "href": "pagination.html#introduction",
    "title": "6  Get a lot of data from APIs",
    "section": "",
    "text": "6.1.1 Learning Objectives\nAfter you read this chapter, you will be able to:\n\nFind information about pagination in API docs and descriptions.\nRetry API requests respectfully.\nRetrieve multiple pages of data from an API.\nProcess lists of {httr2} responses.\n\n\n\n6.1.2 Prerequisites\n(prerequisites will be filled in as I write, if I decide to keep this section)",
    "crumbs": [
      "Get more data",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Get a lot of data from APIs</span>"
    ]
  },
  {
    "objectID": "rvest.html",
    "href": "rvest.html",
    "title": "7  Scrape data from web pages",
    "section": "",
    "text": "7.1 TODO",
    "crumbs": [
      "Get more data",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scrape data from web pages</span>"
    ]
  },
  {
    "objectID": "rvest.html#todo",
    "href": "rvest.html#todo",
    "title": "7  Scrape data from web pages",
    "section": "",
    "text": "Strongly point to R4DS for basics.\nReconcile chapter with new LOs.",
    "crumbs": [
      "Get more data",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scrape data from web pages</span>"
    ]
  },
  {
    "objectID": "rvest.html#introduction",
    "href": "rvest.html#introduction",
    "title": "7  Scrape data from web pages",
    "section": "\n7.2 Introduction",
    "text": "7.2 Introduction\n(introduction will be written ~last)\nLearning Objectives\nAfter you read this chapter, you will be able to:\n\nDecide whether to scrape data from a web page.\nUse {polite} to responsibly scrape web pages.\nScrape complex data structures from web pages.\nScrape content that requires interaction.\nPrerequisites\n(prerequisites will be filled in as I write, if I decide to keep this section)",
    "crumbs": [
      "Get more data",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scrape data from web pages</span>"
    ]
  },
  {
    "objectID": "rvest.html#should-i-scrape-this-data",
    "href": "rvest.html#should-i-scrape-this-data",
    "title": "7  Scrape data from web pages",
    "section": "\n7.3 Should I scrape this data?",
    "text": "7.3 Should I scrape this data?\nWhen you see data online that you think you could use, stop to answer these three questions:\n\nAm I legally allowed to scrape this data?\nAm I allowed to scrape this data automatically?\nDo I need to scrape this data with code?\n\n\n7.3.1 Am I legally allowed to scrape this data?\nI am an R developer, not a lawyer, and none of this should be construed as legal advice. If you’re going to use the data in a commercial product, you may want to consult a lawyer. That said, these guidelines should get you started in most cases.\nIf you’re using the data for your own exploration or for nonprofit educational purposes, you’re almost definitely free to use the data however you like. Copyright cases tend to involve either making money off of the work, or making it harder for the owner of the work to use it to make money.\nAlso check the site for legal disclaimers. These are usually located at the bottom of the page, or possibly somewhere on the first page of the site. Look for words or phrases like “Legal,” “License,” “Code of Conduct”, “Usage”, or “Disclaimers.” Sometimes the site explicitly grants the right to use the data, which will generally supersede any general legal protection.\nIf you’re going to publish (or otherwise share) the data, and you can’t find anything on the site given you permission, you’ll have to decide if your use case is allowed. In the United States, facts are not protected by copyright.1 TODO: DIFFERENT EXAMPLE, EVERYONE USES RECIPES! That’s why cook books and online recipes tend to devote as much space (or more) to stories than to the recipes themselves — the recipes are facts and thus don’t have copyright protection in the U.S. However, a collection of facts (such as the data you’re trying to scrape) can be protected in the U.S. if that collection was selected by a person.\n\n“These choices as to selection and arrangement, so long as they are made independently by the compiler and entail a minimal degree of creativity, are sufficiently original that Congress may protect such compilations through the copyright laws”2\n\nOutside the U.S., protections may be stronger or weaker. For example, the European Union established specific legal protections for databases in a directive on the legal protection of databases. If you’re going to publish the data, investigate legal requirements in your location.\n\n7.3.2 Am I allowed to scrape this data automatically?\nEven if it is legal for you to use the data, it might not be polite to do so. For example, the site might have preferences about which pages can be accessed by code, or specific protections or guidelines about certain pages. Most websites list these preference in a robots.txt file at the root of the site. For example, the robots.txt file for the online version of this book is available at https://jonthegeek.github.io/wapir/robots.txt. This file might contain one or a few lines.\n\n\n\nhttps://wapir.io/robots.txt\n\n# TODO: Replace this with the final version for this book.\n\nSitemap: https://wapir.io/sitemap.xml\n\n\nThings to put into this section:\n\nrobots.txt (search for \"User-agent: *\" and the particular page you want to scrape)\nLicenses & legal usage. IANAL.\nIs it worth scraping? Will {datapasta} cover it?\nQuickly identifying whether it will be hard.\nLook for an API to use instead of scraping. Just introduce the idea then point to that chapter.\nEven when robots.txt allows scraping, give tips on how to be a good citizen.\n{polite} package? I think probably focus more on learning to read robots.txt and how to implement things in rvest (and later httr2), but I should at least mention {polite}.",
    "crumbs": [
      "Get more data",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scrape data from web pages</span>"
    ]
  },
  {
    "objectID": "rvest.html#how-can-i-scrape-a-table-of-data-from-a-web-page",
    "href": "rvest.html#how-can-i-scrape-a-table-of-data-from-a-web-page",
    "title": "7  Scrape data from web pages",
    "section": "\n7.4 How can I scrape a table of data from a web page?",
    "text": "7.4 How can I scrape a table of data from a web page?\n\nBasic intro to {rvest}.\n\nScrape a static table in this repo where html_table works out of the box. It looks like it’ll get a single table without any fuss.\nBRIEFLY touch on data cleaning, but send them to R4DS for more details.\nShow an example with multiple tables & how to deal with that (pre-SelectorGadget).",
    "crumbs": [
      "Get more data",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scrape data from web pages</span>"
    ]
  },
  {
    "objectID": "rvest.html#how-can-i-scrape-more-complex-data-from-a-web-page",
    "href": "rvest.html#how-can-i-scrape-more-complex-data-from-a-web-page",
    "title": "7  Scrape data from web pages",
    "section": "\n7.5 How can I scrape more complex data from a web page?",
    "text": "7.5 How can I scrape more complex data from a web page?\n\nUsing SelectorGadget.\n\nStart by reproducing the table scrape, without SelectorGadget (basically just do what )\nA second table where html_table doesn’t work as well (weird headers or something). Maybe; the next example might be enough.\nA web page with structured content that isn’t in a table. Like the Star Wars example in rvest, but someting else. Maybe information about HTTP request methods? Oh, or Xpath rules!\n\n\nCSS selectors\n\nStart by digging into what SelectorGadget produced for the examples above/what it means.\nAdd an example where it’s way more straightforward to do things sequentially (structured data in a particular cell of a particular table, something like that).\nCSS selectors vs Xpath. Hmm. Which is more straightforward? Probably teach Xpath because it lets you do all the things. Nope, CSS selectors can also do all the things, and they overlap with actual CSS which is useful in its own right! Consider teaching both, at least briefly, and point to MDN or w3schools for more. FWIW, rvest translates everything to xpath via selectr::css_to_xpath().\nIf Xpath: Note the difference between \".//\" (search below the current node) and \"//\" (search anywhere in the document). You never want just \"//\" in a pipe, because it ignores previous steps (well, except MAYBE if you’re using a selection to go back and find something else)! Probably put this in a call out.\nMaybe note that a lot of {rvest} is reexports from {xml2}?\nAlso note the flatten argument for xml2::xml_find_all()! By default it de-duplicates, so watch out if you’re trying to align lists. Make sure this behaves how I think it does, and, if so, provide an example where it matters. This appears to be the only place where I need to bring up {xml2} directly, but probably point it out for further reading.\n\nhtml_attrs() (list all of the attributes) vs html_attr() (get a specific attribute). Similar to attributes() vs attr().\nA con of CSS selectors: Can’t go back up the tree! I feel like this is probably important in some contexts. If there’s a legitimate case where this is true, use that as the reason to focus on Xpath.",
    "crumbs": [
      "Get more data",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scrape data from web pages</span>"
    ]
  },
  {
    "objectID": "rvest.html#ideas-to-cover",
    "href": "rvest.html#ideas-to-cover",
    "title": "7  Scrape data from web pages",
    "section": "Ideas to cover",
    "text": "Ideas to cover\n\nAdvanced {rvest} techniques.\n\nCan I ~easily deploy something that requires a session?\nIs the session stuff in {rvest} relatively stable? How might the {chromote} PR impact it?\nAre there options other than {rvest} that I should explore? {RSelenium}, {chromote} worth mentions, or too different?\nBridge into {httr2}. Don’t write this yet, bridges should be written last!\nLarger-than-memory scraping, splitting scrapes, etc.\n\n\nAutomation.\n\nRefining selections toward “what” vs “how” & “where”, trying to make your selections less fragile.\nDeduplication.\nError handling.\nLogging? Likely mention and point to do4ds for more details (or just a specific logging package).\nMention packages for notification that a job is finished (from {beepr} to an email or Slack message… but maybe use those to tease later chapters).\n\n\n{targets}?\n\nAt least mention.\nDig into this to see how quickly I could introduce without it growing into a separate thing.",
    "crumbs": [
      "Get more data",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scrape data from web pages</span>"
    ]
  },
  {
    "objectID": "rvest.html#another-exploration",
    "href": "rvest.html#another-exploration",
    "title": "7  Scrape data from web pages",
    "section": "Another Exploration",
    "text": "Another Exploration\nSuggested by Emir Bilim on DSLC, let them know when it’s worked out! Also include a case like this in the Appendix!\n\nlibrary(rvest)\nurl &lt;- \"https://finance.yahoo.com/quote/AAPL/financials?p=AAPL&guccounter=1\"\n\n## Annual only for now.\n\n# Cache the read during experimentation so you don't hit it over and over.\nraw_html &lt;- rvest::read_html(url)\n\nannual_cells &lt;-\n    raw_html |&gt; \n    rvest::html_element(\n        xpath = \".//div[@class='M(0) Whs(n) BdEnd Bdc($seperatorColor) D(itb)']\"\n    ) |&gt; \n    rvest::html_text2() |&gt; \n    # The text comes in as a single block separated by newlines (\\n).\n    stringr::str_split_1(stringr::fixed(\"\\n\"))\n\n# The first text to come in is the column headers. We want to go through the\n# last one that's a date.\nannual_date_cell_numbers &lt;- stringr::str_which(\n    annual_cells, \"^\\\\d{1,2}/\\\\d{1,2}/\\\\d{4}$\"\n)\nlast_date_cell_number &lt;- max(annual_date_cell_numbers)\n\nannual &lt;- \n    annual_cells |&gt; \n    # We're going to transpose the table as we go; rows will become columns,\n    # columns will become rows. It's tidier that way. The last date is our last\n    # column.\n    matrix(nrow = last_date_cell_number, byrow = FALSE) |&gt; \n    as.data.frame() |&gt; \n    janitor::row_to_names(row_number = 1) |&gt; \n    tibble::as_tibble()\n\n# That gets the a good start on the \"Annual\" data; it just needs normal cleaning\n# from there. It does NOT include the breakdowns yet, though. I believe both\n# that and Quarterly will require some session fanciness. To be continued!",
    "crumbs": [
      "Get more data",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scrape data from web pages</span>"
    ]
  },
  {
    "objectID": "rvest.html#footnotes",
    "href": "rvest.html#footnotes",
    "title": "7  Scrape data from web pages",
    "section": "",
    "text": "See the U.S. Copyright Office Fair Use Index for a detailed discussion of the legal definition of fair use in the United States, and an index of related court decisions.↩︎\nFeist Publications, Inc. v. Rural Telephone Service Co., 499 U. S. 340 (1991)↩︎",
    "crumbs": [
      "Get more data",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scrape data from web pages</span>"
    ]
  },
  {
    "objectID": "responses.html",
    "href": "responses.html",
    "title": "8  Process other response types",
    "section": "",
    "text": "8.1 Introduction\n(introduction will be written ~last)",
    "crumbs": [
      "Get more data",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Process other response types</span>"
    ]
  },
  {
    "objectID": "responses.html#introduction",
    "href": "responses.html#introduction",
    "title": "8  Process other response types",
    "section": "",
    "text": "8.1.1 Learning Objectives\nAfter you read this chapter, you will be able to:\n\nParse text responses.\nParse binary responses such as images and videos.\nHandle HTTP error responses.\n\n\n\n8.1.2 Prerequisites\n(prerequisites will be filled in as I write, if I decide to keep this section)",
    "crumbs": [
      "Get more data",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Process other response types</span>"
    ]
  },
  {
    "objectID": "part-do_more.html",
    "href": "part-do_more.html",
    "title": "Do more with APIs",
    "section": "",
    "text": "This is an intro to a part.\nThese are the chapters, introduced with a phrase that encapsulates them:\n\nDescribe the chapter. Reference it with a tag.\nDescribe another chapter. Reference it with a tag.\n\nAnd then a sentence or paragraph about any leftovers.",
    "crumbs": [
      "Do more with APIs"
    ]
  },
  {
    "objectID": "httr2-other.html",
    "href": "httr2-other.html",
    "title": "9  Do other things with APIs",
    "section": "",
    "text": "9.1 Introduction\n(introduction will be written ~last)",
    "crumbs": [
      "Do more with APIs",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Do other things with APIs</span>"
    ]
  },
  {
    "objectID": "httr2-other.html#introduction",
    "href": "httr2-other.html#introduction",
    "title": "9  Do other things with APIs",
    "section": "",
    "text": "9.1.1 Learning Objectives\nAfter you read this chapter, you will be able to:\n\nCreate new content through an API.\nUpdate existing content through an API.\nDelete existing content through an API.\nPerform multiple API requests.\nLearn more about making API requests with {httr2}.\n\n\n\n9.1.2 Prerequisites\n(prerequisites will be filled in as I write, if I decide to keep this section)",
    "crumbs": [
      "Do more with APIs",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Do other things with APIs</span>"
    ]
  },
  {
    "objectID": "apis-find.html",
    "href": "apis-find.html",
    "title": "10  Find APIs",
    "section": "",
    "text": "10.1 Introduction\n(introduction will be written ~last)",
    "crumbs": [
      "Do more with APIs",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Find APIs</span>"
    ]
  },
  {
    "objectID": "apis-find.html#introduction",
    "href": "apis-find.html#introduction",
    "title": "10  Find APIs",
    "section": "",
    "text": "10.1.1 Learning Objectives\nAfter you read this chapter, you will be able to:\n\nSearch the web for APIs.\nSearch for API-wrapping packages.\nUse browser developer tools to find undocumented APIs.\n\n\n\n10.1.2 Prerequisites\n(prerequisites will be filled in as I write, if I decide to keep this section)",
    "crumbs": [
      "Do more with APIs",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Find APIs</span>"
    ]
  },
  {
    "objectID": "accessing-other.html",
    "href": "accessing-other.html",
    "title": "11  Communicate with other types of APIs",
    "section": "",
    "text": "11.1 Introduction\n(introduction will be written ~last)",
    "crumbs": [
      "Do more with APIs",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Communicate with other types of APIs</span>"
    ]
  },
  {
    "objectID": "accessing-other.html#introduction",
    "href": "accessing-other.html#introduction",
    "title": "11  Communicate with other types of APIs",
    "section": "",
    "text": "Learning Objectives\nAfter you read this chapter, you will be able to:\n\nFetch data from GraphQL APIs.\nFetch data from websocket APIs.\nFetch data from gRPC APIs.\n\n\n\n11.1.1 Prerequisites\n(prerequisites will be filled in as I write, if I decide to keep this section)",
    "crumbs": [
      "Do more with APIs",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Communicate with other types of APIs</span>"
    ]
  },
  {
    "objectID": "learn-more.html",
    "href": "learn-more.html",
    "title": "12  Learn more about APIs",
    "section": "",
    "text": "12.1 Introduction\n(introduction will be written ~last)",
    "crumbs": [
      "Do more with APIs",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Learn more about APIs</span>"
    ]
  },
  {
    "objectID": "learn-more.html#introduction",
    "href": "learn-more.html#introduction",
    "title": "12  Learn more about APIs",
    "section": "",
    "text": "12.1.1 Learning Objectives\nAfter you read this chapter, you will be able to:\n\n\n12.1.2 Prerequisites\n(prerequisites will be filled in as I write, if I decide to keep this section)",
    "crumbs": [
      "Do more with APIs",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Learn more about APIs</span>"
    ]
  },
  {
    "objectID": "examples-toy.html",
    "href": "examples-toy.html",
    "title": "Appendix A — Toy Examples",
    "section": "",
    "text": "A.1 Introduction\nThis is an appendix. These will be toy examples, to be used with exercises.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Toy Examples</span>"
    ]
  }
]