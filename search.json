[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Web APIs with R",
    "section": "",
    "text": "Welcome\nLast updated: 2023-08-15 18:17:25 CDT\nThis is the website for the work-in-progress book, Web APIs with R. This book will teach you how to work with the web from your R session.\nThis website is free to use, and is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.\nThe code contained in this book is simultaneously available under the MIT license; this means that you are free to use it in your own packages, as long as you cite the source."
  },
  {
    "objectID": "index.html#want-to-help",
    "href": "index.html#want-to-help",
    "title": "Web APIs with R",
    "section": "Want to help?",
    "text": "Want to help?\nI am writing this book in a GitHub repository. Follow the “Edit this page” or “Report an issue” links in the table of contents if you would like to help!"
  },
  {
    "objectID": "index.html#the-r4ds-online-learning-community",
    "href": "index.html#the-r4ds-online-learning-community",
    "title": "Web APIs with R",
    "section": "The R4DS Online Learning Community",
    "text": "The R4DS Online Learning Community\nIf you would like to discuss the contents of this book (or any other R-related topic), join the R4DS Online Learning Community Slack."
  },
  {
    "objectID": "index.html#code-of-conduct",
    "href": "index.html#code-of-conduct",
    "title": "Web APIs with R",
    "section": "Code of Conduct",
    "text": "Code of Conduct\nPlease note that Web APIs with R is released with a Contributor Code of Conduct. By contributing to this project, you agree to abide by its terms."
  },
  {
    "objectID": "intro.html#who-should-read-this-book",
    "href": "intro.html#who-should-read-this-book",
    "title": "1  Introduction",
    "section": "1.1 Who should read this book?",
    "text": "1.1 Who should read this book?\nThis might overlap with the “What will I learn?” section. It feels like a good thing to have up front to entice people to read or buy the book, though."
  },
  {
    "objectID": "intro.html#what-will-i-learn",
    "href": "intro.html#what-will-i-learn",
    "title": "1  Introduction",
    "section": "1.2 What will I learn?",
    "text": "1.2 What will I learn?\nDescribe the overall goals, and explain the learning objective hierarchy. Maybe this is before or instead of who should read?\nMaybe put the landscape here, and intro the structure of the book earlier. How will I learn? maybe?"
  },
  {
    "objectID": "intro.html#what-wont-i-learn",
    "href": "intro.html#what-wont-i-learn",
    "title": "1  Introduction",
    "section": "1.3 What won’t I learn?",
    "text": "1.3 What won’t I learn?\nI like the idea of this section, but I don’t know if it will fit."
  },
  {
    "objectID": "intro.html#how-is-this-book-organized",
    "href": "intro.html#how-is-this-book-organized",
    "title": "1  Introduction",
    "section": "1.4 How is this book organized?",
    "text": "1.4 How is this book organized?\nI’d love to know!"
  },
  {
    "objectID": "intro.html#what-should-i-already-know",
    "href": "intro.html#what-should-i-already-know",
    "title": "1  Introduction",
    "section": "1.5 What should I already know?",
    "text": "1.5 What should I already know?\nDescribe what we expect people to already know. Include references to other books: R4DS, AdvR, RPkgs, Do4DS, maybe MShiny. Note that each part and/or chapter will describe the prerequisites for that part. Most of those books will be places to find more info or to dive deeper into a topic."
  },
  {
    "objectID": "intro.html#how-do-i-run-the-code",
    "href": "intro.html#how-do-i-run-the-code",
    "title": "1  Introduction",
    "section": "1.6 How do I run the code?",
    "text": "1.6 How do I run the code?\nExplain what code looks like here vs to the user. Give a disclaimer that open source software changes so things might change, and that we’ll try to keep the online version up-to-date. Potentially link to additional resources, maybe a book package."
  },
  {
    "objectID": "intro.html#acknowledgements",
    "href": "intro.html#acknowledgements",
    "title": "1  Introduction",
    "section": "1.7 Acknowledgements",
    "text": "1.7 Acknowledgements\nThis is the acknowledgement that appears in the actual book. RStudio has code to auto-generate it, consider something similar."
  },
  {
    "objectID": "intro.html#footnotes",
    "href": "intro.html#footnotes",
    "title": "1  Introduction",
    "section": "",
    "text": "API stands for “application programming interface,” but you will almost always see it written as “API.” It’s pronounced “A P I.”↩︎"
  },
  {
    "objectID": "part_accessing.html",
    "href": "part_accessing.html",
    "title": "How can I get web data into R?",
    "section": "",
    "text": "This is an intro to a part.\nThese are the chapters, introduced with a phrase that encapsulates them:\n\nDescribe the chapter. Reference it with a tag.\nDescribe another chapter. Reference it with a tag.\n\nAnd then a sentence or paragraph about any leftovers."
  },
  {
    "objectID": "rvest.html#introduction",
    "href": "rvest.html#introduction",
    "title": "2  How can I get data from web pages?",
    "section": "2.1 Introduction",
    "text": "2.1 Introduction\n(introduction will be written ~last)\n\n2.1.1 Learning Objectives\nAfter you read this chapter, you will be able to:\n\nDetermine whether a website allows you to scrape data from it.\nDetermine whether you should scrape data from a web page.\nScrape tables from web pages.\nScrape more complex data structures from web pages.\n\n(potential chapter break)\n\nScrape data from websites that require you to log in.\nScrape content that requires interaction.\nAutomate web scraping processes.\nScrape data as part of a workflow.\n\n\n\n2.1.2 Prerequisites\n(prerequisites will be filled in as I write, if I decide to keep this section)"
  },
  {
    "objectID": "rvest.html#should-i-scrape-this-data",
    "href": "rvest.html#should-i-scrape-this-data",
    "title": "2  How can I get data from web pages?",
    "section": "2.2 Should I scrape this data?",
    "text": "2.2 Should I scrape this data?\nThings to put into this section:\n\nrobots.txt\nLicenses & legal usage. IANAL.\nIs it worth scraping? Will {datapasta} cover it?\nQuickly identifying whether it will be hard.\nLook for an API to use instead of scraping. Just introduce the idea then point to that chapter.\nEven when robots.txt allows scraping, give tips on how to be a good citizen.\n{polite} package? I think probably focus more on learning to read robots.txt and how to implement things in rvest (and later httr2), but I should at least mention {polite}."
  },
  {
    "objectID": "rvest.html#how-can-i-scrape-a-table-of-data-from-a-web-page",
    "href": "rvest.html#how-can-i-scrape-a-table-of-data-from-a-web-page",
    "title": "2  How can I get data from web pages?",
    "section": "2.3 How can I scrape a table of data from a web page?",
    "text": "2.3 How can I scrape a table of data from a web page?\n\nBasic intro to {rvest}.\n\nScrape a static table in this repo where html_table works out of the box. It looks like it’ll get a single table without any fuss.\nBRIEFLY touch on data cleaning, but send them to R4DS for more details.\nShow an example with multiple tables & how to deal with that (pre-SelectorGadget)."
  },
  {
    "objectID": "rvest.html#how-can-i-scrape-more-complex-data-from-a-web-page",
    "href": "rvest.html#how-can-i-scrape-more-complex-data-from-a-web-page",
    "title": "2  How can I get data from web pages?",
    "section": "2.4 How can I scrape more complex data from a web page?",
    "text": "2.4 How can I scrape more complex data from a web page?\n\nUsing SelectorGadget.\n\nStart by reproducing the table scrape, without SelectorGadget (basically just do what )\nA second table where html_table doesn’t work as well (weird headers or something). Maybe; the next example might be enough.\nA web page with structured content that isn’t in a table. Like the Star Wars example in rvest, but someting else. Maybe information about HTTP request methods? Oh, or Xpath rules!\n\nXpath and/or CSS selectors\n\nStart by digging into what SelectorGadget produced for the examples above/what it means.\nAdd an example where it’s way more straightforward to do things sequentially (structured data in a particular cell of a particular table, something like that).\nCSS selectors vs Xpath. Hmm. Which is more straightforward? Probably teach Xpath because it lets you do all the things. Consider teaching both, at least briefly, and point to MDN or w3schools for more. FWIW, rvest translates everything to xpath via selectr::css_to_xpath().\nNote the difference between \".//\" (search below the current node) and \"//\" (search anywhere in the document). You never want just \"//\" in a pipe, because it ignores previous steps (well, except MAYBE if you’re using a selection to go back and find something else)! Probably put this in a call out.\nMaybe note that a lot of {rvest} is reexports from {xml2}?\nAlso note the flatten argument for xml2::xml_find_all()! By default it de-duplicates, so watch out if you’re trying to align lists. Make sure this behaves how I think it does, and, if so, provide an example where it matters. This appears to be the only place where I need to bring up {xml2} directly, but probably point it out for further reading.\nhtml_attrs() (list all of the attributes) vs html_attr() (get a specific attribute). Similar to attributes() vs attr()."
  },
  {
    "objectID": "rvest.html#ideas-to-cover",
    "href": "rvest.html#ideas-to-cover",
    "title": "2  How can I get data from web pages?",
    "section": "2.5 Ideas to cover:",
    "text": "2.5 Ideas to cover:\n\nAdvanced {rvest} techniques.\n\nCan I ~easily deploy something that requires a session?\nIs the session stuff in {rvest} relatively stable? How might the {chromote} PR impact it?\nAre there options other than {rvest} that I should explore? {RSelenium}, {chromote} worth mentions, or too different?\nBridge into {httr2}. Don’t write this yet, bridges should be written last!\nLarger-than-memory scraping, splitting scrapes, etc.\n\nAutomation.\n\nRefining selections toward “what” vs “how” & “where”, trying to make your selections less fragile.\nDeduplication.\nError handling.\nLogging? Likely mention and point to do4ds for more details (or just a specific logging package).\nMention packages for notification that a job is finished (from {beepr} to an email or Slack message… but maybe use those to tease later chapters).\n\n{targets}?\n\nAt least mention.\nDig into this to see how quickly I could introduce without it growing into a separate thing."
  },
  {
    "objectID": "rvest.html#another-exploration",
    "href": "rvest.html#another-exploration",
    "title": "2  How can I get data from web pages?",
    "section": "2.6 Another Exploration",
    "text": "2.6 Another Exploration\nSuggested by Emir Bilim on R4DS, let them know when it’s worked out! Also include a case like this in the Appendix!\n\nlibrary(rvest)\nurl &lt;- \"https://finance.yahoo.com/quote/AAPL/financials?p=AAPL&guccounter=1\"\n\nannual &lt;-\n    rvest::read_html(url) |&gt; \n    rvest::html_element(\n        xpath = \".//div[@class='M(0) Whs(n) BdEnd Bdc($seperatorColor) D(itb)']\"\n    ) |&gt; \n    rvest::html_text2() |&gt; \n    stringr::str_split_1(stringr::fixed(\"\\n\")) |&gt; \n    # We're going to transpose the table as we go; rows will become columns,\n    # columns will become rows. It's tidier that way. Get the \"6\" here by\n    # counting the displayed columns.\n    matrix(nrow = 6, byrow = FALSE) |&gt; \n    as.data.frame() |&gt; \n    janitor::row_to_names(row_number = 1) |&gt; \n    tibble::as_tibble()\n\n# That gets the a good start on the \"Annual\" data; it just needs normal cleaning\n# from there. It does NOT include the breakdowns yet, though. I believe both\n# that and Quarterly will require some session fanciness. To be continued\n# tomorrow!"
  },
  {
    "objectID": "json.html#introduction",
    "href": "json.html#introduction",
    "title": "3  How can I process JSON data?",
    "section": "3.1 Introduction",
    "text": "3.1 Introduction\n(introduction will be written ~last)\n\n3.1.1 Learning Objectives\nAfter you read this chapter, you will be able to:\n\n\n3.1.2 Prerequisites\n(prerequisites will be filled in as I write, if I decide to keep this section)"
  },
  {
    "objectID": "httr2.html#introduction",
    "href": "httr2.html#introduction",
    "title": "4  What is an API and how can I access one?",
    "section": "4.1 Introduction",
    "text": "4.1 Introduction\n(introduction will be written ~last)\n\n4.1.1 Learning Objectives\nAfter you read this chapter, you will be able to:\n\n\n4.1.2 Prerequisites\n(prerequisites will be filled in as I write, if I decide to keep this section)"
  },
  {
    "objectID": "authentication.html#introduction",
    "href": "authentication.html#introduction",
    "title": "5  How do I prove that I’m me?",
    "section": "5.1 Introduction",
    "text": "5.1 Introduction\n(introduction will be written ~last)\n\n5.1.1 Learning Objectives\nAfter you read this chapter, you will be able to:\n\n\n5.1.2 Prerequisites\n(prerequisites will be filled in as I write, if I decide to keep this section)"
  },
  {
    "objectID": "automation.html#introduction",
    "href": "automation.html#introduction",
    "title": "6  How can I automate web API access?",
    "section": "6.1 Introduction",
    "text": "6.1 Introduction\n(introduction will be written ~last)\n\n6.1.1 Learning Objectives\nAfter you read this chapter, you will be able to:\n\n\n6.1.2 Prerequisites\n(prerequisites will be filled in as I write, if I decide to keep this section)"
  },
  {
    "objectID": "automation.html#notes-ideas",
    "href": "automation.html#notes-ideas",
    "title": "6  How can I automate web API access?",
    "section": "6.2 Notes & ideas",
    "text": "6.2 Notes & ideas\n\nInclude {rvest} automation.\nCover (an intro to) error messaging/logging/alerting."
  },
  {
    "objectID": "packages.html#introduction",
    "href": "packages.html#introduction",
    "title": "7  How can I wrap a web API into an R package?",
    "section": "7.1 Introduction",
    "text": "7.1 Introduction\n(introduction will be written ~last)\n\n7.1.1 Learning Objectives\nAfter you read this chapter, you will be able to:\n\n\n7.1.2 Prerequisites\n(prerequisites will be filled in as I write, if I decide to keep this section)"
  },
  {
    "objectID": "accessing-more.html#introduction",
    "href": "accessing-more.html#introduction",
    "title": "8  How can I learn more about accessing web APIs?",
    "section": "8.1 Introduction",
    "text": "8.1 Introduction\n(introduction will be written ~last)\n\n8.1.1 Learning Objectives\nAfter you read this chapter, you will be able to:\n\n\n8.1.2 Prerequisites\n(prerequisites will be filled in as I write, if I decide to keep this section)"
  },
  {
    "objectID": "part_creating.html",
    "href": "part_creating.html",
    "title": "How can I create my own APIs with R?",
    "section": "",
    "text": "TODO:\n\nConsider adding a chapter on securing APIs (or at least include it in deploy.qmd).\nSame for scaling. Scaling should almost definitely go inside deploy.qmd.\n\nThis is an intro to a part.\nThese are the chapters, introduced with a phrase that encapsulates them:\n\nDescribe the chapter. Reference it with a tag.\nDescribe another chapter. Reference it with a tag.\n\nAnd then a sentence or paragraph about any leftovers."
  },
  {
    "objectID": "plumber.html#introduction",
    "href": "plumber.html#introduction",
    "title": "9  How can I create my own APIs?",
    "section": "9.1 Introduction",
    "text": "9.1 Introduction\n(introduction will be written ~last)\n\n9.1.1 Learning Objectives\nAfter you read this chapter, you will be able to:\n\n\n9.1.2 Prerequisites\n(prerequisites will be filled in as I write, if I decide to keep this section)"
  },
  {
    "objectID": "deploy.html#introduction",
    "href": "deploy.html#introduction",
    "title": "10  How do I deploy my plumber API?",
    "section": "10.1 Introduction",
    "text": "10.1 Introduction\n(introduction will be written ~last)\n\n10.1.1 Learning Objectives\nAfter you read this chapter, you will be able to:\n\n\n10.1.2 Prerequisites\n(prerequisites will be filled in as I write, if I decide to keep this section)"
  },
  {
    "objectID": "test-plumber.html#introduction",
    "href": "test-plumber.html#introduction",
    "title": "11  How can I test my plumber API?",
    "section": "11.1 Introduction",
    "text": "11.1 Introduction\n(introduction will be written ~last)\n\n11.1.1 Learning Objectives\nAfter you read this chapter, you will be able to:\n\n\n11.1.2 Prerequisites\n(prerequisites will be filled in as I write, if I decide to keep this section)"
  },
  {
    "objectID": "creating-more.html#introduction",
    "href": "creating-more.html#introduction",
    "title": "12  How can I learn more about creating APIs?",
    "section": "12.1 Introduction",
    "text": "12.1 Introduction\n(introduction will be written ~last)\n\n12.1.1 Learning Objectives\nAfter you read this chapter, you will be able to:\n\n\n12.1.2 Prerequisites\n(prerequisites will be filled in as I write, if I decide to keep this section)"
  },
  {
    "objectID": "examples.html#introduction",
    "href": "examples.html#introduction",
    "title": "Appendix A — API Examples",
    "section": "A.1 Introduction",
    "text": "A.1 Introduction\nThis is an appendix."
  }
]