[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Web APIs with R",
    "section": "",
    "text": "Welcome\nLast updated: 2023-08-11 18:18:08 CDT\nThis is the website for the work-in-progress book, Web APIs with R. This book will teach you how to work with the web from your R session.\nThis website is free to use, and is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.\nThe code contained in this book is simultaneously available under the MIT license; this means that you are free to use it in your own packages, as long as you cite the source."
  },
  {
    "objectID": "index.html#want-to-help",
    "href": "index.html#want-to-help",
    "title": "Web APIs with R",
    "section": "Want to help?",
    "text": "Want to help?\nI am writing this book in a GitHub repository. Follow the “Edit this page” or “Report an issue” links in the table of contents if you would like to help!"
  },
  {
    "objectID": "index.html#the-r4ds-online-learning-community",
    "href": "index.html#the-r4ds-online-learning-community",
    "title": "Web APIs with R",
    "section": "The R4DS Online Learning Community",
    "text": "The R4DS Online Learning Community\nIf you would like to discuss the contents of this book (or any other R-related topic), join the R4DS Online Learning Community Slack."
  },
  {
    "objectID": "index.html#code-of-conduct",
    "href": "index.html#code-of-conduct",
    "title": "Web APIs with R",
    "section": "Code of Conduct",
    "text": "Code of Conduct\nPlease note that Web APIs with R is released with a Contributor Code of Conduct. By contributing to this project, you agree to abide by its terms."
  },
  {
    "objectID": "intro.html#who-should-read-this-book",
    "href": "intro.html#who-should-read-this-book",
    "title": "1  Introduction",
    "section": "1.1 Who should read this book?",
    "text": "1.1 Who should read this book?\nThis might overlap with the “What will I learn?” section. It feels like a good thing to have up front to entice people to read or buy the book, though."
  },
  {
    "objectID": "intro.html#what-will-i-learn",
    "href": "intro.html#what-will-i-learn",
    "title": "1  Introduction",
    "section": "1.2 What will I learn?",
    "text": "1.2 What will I learn?\nDescribe the overall goals, and explain the learning objective hierarchy. Maybe this is before or instead of who should read?"
  },
  {
    "objectID": "intro.html#what-wont-i-learn",
    "href": "intro.html#what-wont-i-learn",
    "title": "1  Introduction",
    "section": "1.3 What won’t I learn?",
    "text": "1.3 What won’t I learn?\nI like the idea of this section, but I don’t know if it will fit."
  },
  {
    "objectID": "intro.html#how-is-this-book-organized",
    "href": "intro.html#how-is-this-book-organized",
    "title": "1  Introduction",
    "section": "1.4 How is this book organized?",
    "text": "1.4 How is this book organized?\nI’d love to know!"
  },
  {
    "objectID": "intro.html#what-should-i-already-know",
    "href": "intro.html#what-should-i-already-know",
    "title": "1  Introduction",
    "section": "1.5 What should I already know?",
    "text": "1.5 What should I already know?\nDescribe what we expect people to already know. Include references to other books: R4DS, AdvR, RPkgs, Do4DS, maybe MShiny. Note that each part and/or chapter will describe the prerequisites for that part."
  },
  {
    "objectID": "intro.html#how-do-i-run-the-code",
    "href": "intro.html#how-do-i-run-the-code",
    "title": "1  Introduction",
    "section": "1.6 How do I run the code?",
    "text": "1.6 How do I run the code?\nExplain what code looks like here vs to the user. Give a disclaimer that open source software changes so things might change, and that we’ll try to keep the online version up-to-date. Potentially link to additional resources, maybe a book package."
  },
  {
    "objectID": "intro.html#acknowledgements",
    "href": "intro.html#acknowledgements",
    "title": "1  Introduction",
    "section": "1.7 Acknowledgements",
    "text": "1.7 Acknowledgements\nThis is the acknowledgement that appears in the actual book. RStudio has code to auto-generate it, consider something similar."
  },
  {
    "objectID": "intro.html#footnotes",
    "href": "intro.html#footnotes",
    "title": "1  Introduction",
    "section": "",
    "text": "API stands for “application programming interface,” but you will almost always see it written as “API.” It’s pronounced “A P I.”↩︎"
  },
  {
    "objectID": "part_accessing.html",
    "href": "part_accessing.html",
    "title": "How can I get web data into R?",
    "section": "",
    "text": "This is an intro to a part.\nThese are the chapters, introduced with a phrase that encapsulates them:\n\nDescribe the chapter. Reference it with a tag.\nDescribe another chapter. Reference it with a tag.\n\nAnd then a sentence or paragraph about any leftovers."
  },
  {
    "objectID": "rvest.html#introduction",
    "href": "rvest.html#introduction",
    "title": "2  How can I scrape web pages?",
    "section": "2.1 Introduction",
    "text": "2.1 Introduction\nThis is a chapter."
  },
  {
    "objectID": "rvest.html#learning-objectives",
    "href": "rvest.html#learning-objectives",
    "title": "2  How can I scrape web pages?",
    "section": "2.2 Learning Objectives",
    "text": "2.2 Learning Objectives\nDo LOs get their own subsection in each chapter?"
  },
  {
    "objectID": "rvest.html#prerequisites",
    "href": "rvest.html#prerequisites",
    "title": "2  How can I scrape web pages?",
    "section": "2.3 Prerequisites",
    "text": "2.3 Prerequisites\nIt has prerequisites, maybe?"
  },
  {
    "objectID": "rvest.html#exploration",
    "href": "rvest.html#exploration",
    "title": "2  How can I scrape web pages?",
    "section": "2.4 Exploration",
    "text": "2.4 Exploration\nThis section will be merged into other things or maybe thrown entirely away. I am using it to remind myself what the steps are.\n\nlibrary(rvest)\nurl &lt;- \"https://en.wikipedia.org/wiki/List_of_most_visited_websites\"\n\nmost_visited_websites_raw &lt;- \n  url |&gt; \n  rvest::read_html() |&gt; \n  rvest::html_table() |&gt; \n  _[[1]]\n\ndplyr::glimpse(most_visited_websites_raw)\n\nRows: 50\nColumns: 5\n$ Site                                                            &lt;chr&gt; \"Googl…\n$ `Domain name`                                                   &lt;chr&gt; \"googl…\n$ `Similarweb top 50websites ranking(As of July 2023[update])[1]` &lt;chr&gt; \"1 ()\"…\n$ Category                                                        &lt;chr&gt; \"Compu…\n$ `Principal country/territory`                                   &lt;chr&gt; \"Unite…\n\nmost_visited_websites_janitor &lt;- most_visited_websites_raw |&gt; \n  janitor::clean_names()\n\n# Future-proof\ncolnames(most_visited_websites_janitor)[\n  stringr::str_detect(colnames(most_visited_websites_janitor), \"similarweb\")\n] &lt;- \"similarweb_ranking\"\n\nmost_visited_websites_ranking &lt;- \n  most_visited_websites_janitor |&gt; \n  tidyr::separate_wider_delim(\n    similarweb_ranking, \n    \" \",\n    names = c(\"similarweb_ranking\", \"similarweb_change\")\n  )\n\ndplyr::glimpse(most_visited_websites_ranking)\n\nRows: 50\nColumns: 6\n$ site                        &lt;chr&gt; \"Google Search\", \"YouTube\", \"Facebook\", \"I…\n$ domain_name                 &lt;chr&gt; \"google.com\", \"youtube.com\", \"facebook.com…\n$ similarweb_ranking          &lt;chr&gt; \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9…\n$ similarweb_change           &lt;chr&gt; \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", …\n$ category                    &lt;chr&gt; \"Computers Electronics and Technology &gt; Se…\n$ principal_country_territory &lt;chr&gt; \"United States\", \"United States\", \"United …\n\ndplyr::count(most_visited_websites_ranking, similarweb_change)\n\n# A tibble: 7 × 2\n  similarweb_change     n\n  &lt;chr&gt;             &lt;int&gt;\n1 ()                   18\n2 (1)                  11\n3 (2)                   9\n4 (3)                   6\n5 (4)                   2\n6 (5)                   3\n7 (6)                   1\n\n# TODO: We lost the up/down arrows! Investigate how to get those.\n\nmost_visited_websites_category &lt;- \n  most_visited_websites_ranking |&gt; \n  tidyr::separate_wider_delim(\n    category,\n    delim = \" &gt; \",\n    names_sep = \"_\",\n    too_few = \"align_start\"\n  )\n\ndplyr::glimpse(most_visited_websites_category)\n\nRows: 50\nColumns: 7\n$ site                        &lt;chr&gt; \"Google Search\", \"YouTube\", \"Facebook\", \"I…\n$ domain_name                 &lt;chr&gt; \"google.com\", \"youtube.com\", \"facebook.com…\n$ similarweb_ranking          &lt;chr&gt; \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9…\n$ similarweb_change           &lt;chr&gt; \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", …\n$ category_1                  &lt;chr&gt; \"Computers Electronics and Technology\", \"A…\n$ category_2                  &lt;chr&gt; \"Search Engines\", \"Streaming & Online TV\",…\n$ principal_country_territory &lt;chr&gt; \"United States\", \"United States\", \"United …\n\ndplyr::count(most_visited_websites_category, category_1)\n\n# A tibble: 10 × 2\n   category_1                               n\n   &lt;chr&gt;                                &lt;int&gt;\n 1 Adult                                    6\n 2 Arts & Entertainment                     5\n 3 Community and Society                    1\n 4 Computers Electronics and Technology    25\n 5 Games                                    2\n 6 News & Media Publishers                  6\n 7 Reference Materials                      1\n 8 Science and Education                    1\n 9 Travel and Tourism                       1\n10 eCommerce & Shopping                     2\n\n# Huh. Maybe don't use this for the example. I'm not sure I want to put a bunch\n# of adult sites in my book.\n\nNotes:\n\nMost of that script is tidying, not scraping. Probably worthwhile to talk about column names and separating data, but it’s the same as for any data cleaning.\nImages in Wikipedia tables are lost. Look into how to deal with that, whether it’s worth digging into.\nDefinitely dig into harder examples! Well-formatted tables are boring. Although getting the images might require breaking it down into specifics, which could be useful.\nWhen I break it down, probably show logical breakdowns (tables, then the first table, then rows, or whatever). Still introduce SelectorGadget but talk through other approaches when it isn’t working.\nUse the breakdown to talk about HTML/XML, and also “Inspect” in Chrome.\nDeal with a more complex example that needs a session. Maybe host something for this so it can be published in a book? Make sure Hadley isn’t fundamentally changing this in the dev branch.\nUse session thing to transition to real APIs.\nrvest::read_html() is from {xml2}, and ultimately uses .Call(). session() is doing {httr} stuff under the hood.\n\n\nlibrary(rvest)\n\n# Use this one later, it has a broken header row AND images.\nurl &lt;- \"https://en.wikipedia.org/wiki/List_of_states_and_territories_of_the_United_States\"\n\nstates_raw &lt;- \n  url |&gt; \n  rvest::read_html() |&gt; \n  rvest::html_table()\n\nstates_raw[[2]]\n\n# A tibble: 51 × 13\n   `Flag, name andpostal abbreviation[8]` Flag, name andpostal a…¹ Cities Cities\n   &lt;chr&gt;                                  &lt;chr&gt;                    &lt;chr&gt;  &lt;chr&gt; \n 1 Flag, name andpostal abbreviation[8]   Flag, name andpostal ab… Capit… Large…\n 2 Alabama                                AL                       Montg… Hunts…\n 3 Alaska                                 AK                       Juneau Ancho…\n 4 Arizona                                AZ                       Phoen… Phoen…\n 5 Arkansas                               AR                       Littl… Littl…\n 6 California                             CA                       Sacra… Los A…\n 7 Colorado                               CO                       Denver Denver\n 8 Connecticut                            CT                       Hartf… Bridg…\n 9 Delaware                               DE                       Dover  Wilmi…\n10 Florida                                FL                       Talla… Jacks…\n# ℹ 41 more rows\n# ℹ abbreviated name: ¹​`Flag, name andpostal abbreviation[8]`\n# ℹ 9 more variables: `Ratification oradmission[A]` &lt;chr&gt;,\n#   `Population(2020 census)[10]` &lt;chr&gt;, `Total area[11]` &lt;chr&gt;,\n#   `Total area[11]` &lt;chr&gt;, `Land area[11]` &lt;chr&gt;, `Land area[11]` &lt;chr&gt;,\n#   `Water area[11]` &lt;chr&gt;, `Water area[11]` &lt;chr&gt;, `Numberof Reps.` &lt;chr&gt;\n\n####\n\n# Use this one first, it's simpler.\nurl &lt;- \"https://en.wikipedia.org/wiki/List_of_state_and_territory_name_etymologies_of_the_United_States\"\nstate_name_etymology &lt;- \n  url |&gt; \n  rvest::read_html() |&gt; \n  rvest::html_table()\n\ndplyr::glimpse(state_name_etymology[[1]])\n\nRows: 56\nColumns: 5\n$ `State name`                               &lt;chr&gt; \"Alabama\", \"Alaska\", \"Arizo…\n$ `Date first attested in original language` &lt;chr&gt; \"April 19, 1692\", \"December…\n$ `Language of origin`                       &lt;chr&gt; \"Choctaw/Alabama\", \"Aleut v…\n$ `Word(s) in original language`             &lt;chr&gt; \"alba amo/Albaamaha\", \"alax…\n$ `Meaning and notes`                        &lt;chr&gt; \"'Thicket-clearers'[3] or '…\n\n# Point out row 3-4, which were one row in the original table. Good job, rvest!\n\n# TODO:\n# * Images didn't make it (flag + map)\n# * Footnotes might be helpful to fetch\n# * colnames, dates, etc (normal cleaning)\n\n## Images\n\n# Look at SelectorGadget, talk about drawbacks. Probably do a case where it\n# works better first.\n\n# Right-click, inspect element\n\n# Maybe start with a more raw approach.\n\nstate_name_etymology_images_raw &lt;- \n  url |&gt; \n  rvest::read_html() |&gt; \n  xml2::xml_find_first(\".//table\") |&gt; \n  xml2::xml_find_all(\".//img\") |&gt; \n  xml2::xml_attr(\"src\")\n\nstate_flags &lt;- state_name_etymology_images_raw |&gt; \n  stringr::str_subset(\"Flag_of\") |&gt; \n  (\\(x) {paste0(\"https:\", x)})()\n\n# browseURL(state_flags[[1]])\n# browseURL(state_flags[[1]])\nstate_locations &lt;- state_name_etymology_images_raw |&gt; \n  stringr::str_subset(\"Map_of\") |&gt; \n  (\\(x) {paste0(\"https:\", x)})()\n# browseURL(state_locations[[1]])\n\ntest1 &lt;- url |&gt; \n  rvest::read_html() |&gt; \n  xml2::xml_find_first(\".//table\") |&gt; \n  xml2::xml_find_all(\".//img\")\n\ntest2 &lt;- url |&gt; \n  rvest::read_html() |&gt; \n  xml2::xml_find_first(\".//table\") |&gt; \n  xml2::xml_find_all(\"//img\")\n\ntest3 &lt;- url |&gt; \n  rvest::read_html() |&gt; \n  xml2::xml_find_all(\"//img\")\n\nlength(test1)\n\n[1] 100\n\nlength(test2)\n\n[1] 132\n\nlength(test3)\n\n[1] 132\n\nwaldo::compare(test2, test3)\n\n✔ No differences\n\n# Retrieve xpaths, could be useful if you want to come back after exploring.\ntest1 |&gt; \n  xml2::xml_path() |&gt; \n  head()\n\n[1] \"/html/body/div[2]/div/div[3]/main/div[3]/div[3]/div[1]/table[1]/tbody/tr[2]/td[1]/span[1]/span/span/img\"\n[2] \"/html/body/div[2]/div/div[3]/main/div[3]/div[3]/div[1]/table[1]/tbody/tr[2]/td[1]/span[2]/a/img\"        \n[3] \"/html/body/div[2]/div/div[3]/main/div[3]/div[3]/div[1]/table[1]/tbody/tr[3]/td[1]/span[1]/span/span/img\"\n[4] \"/html/body/div[2]/div/div[3]/main/div[3]/div[3]/div[1]/table[1]/tbody/tr[3]/td[1]/span[2]/a/img\"        \n[5] \"/html/body/div[2]/div/div[3]/main/div[3]/div[3]/div[1]/table[1]/tbody/tr[4]/td[1]/span[1]/span/span/img\"\n[6] \"/html/body/div[2]/div/div[3]/main/div[3]/div[3]/div[1]/table[1]/tbody/tr[4]/td[1]/span[2]/a/img\"        \n\n\n\nA lot of this chapter should probably be an intro to Xpath.\nNote the difference between \".//\" (search below the current node) and \"//\" (search anywhere in the document). You never want just \"//\" in a pipe, because it ignores previous steps!\nAlso note the flatten argument for xml2::xml_find_all()! By default it de-duplicates, so watch out if you’re trying to align lists.\nxml_attrs() (list all of the attributes) vs xml_attr() (get a specific attribute). Similar to attributes() vs attr()."
  },
  {
    "objectID": "json.html#introduction",
    "href": "json.html#introduction",
    "title": "3  How can I process JSON data?",
    "section": "3.1 Introduction",
    "text": "3.1 Introduction\nThis is a chapter."
  },
  {
    "objectID": "json.html#learning-objectives",
    "href": "json.html#learning-objectives",
    "title": "3  How can I process JSON data?",
    "section": "3.2 Learning Objectives",
    "text": "3.2 Learning Objectives\nDo LOs get their own subsection in each chapter?"
  },
  {
    "objectID": "json.html#prerequisites",
    "href": "json.html#prerequisites",
    "title": "3  How can I process JSON data?",
    "section": "3.3 Prerequisites",
    "text": "3.3 Prerequisites\nIt has prerequisites, maybe?"
  },
  {
    "objectID": "httr2.html#introduction",
    "href": "httr2.html#introduction",
    "title": "4  What is an API and how can I access one?",
    "section": "4.1 Introduction",
    "text": "4.1 Introduction\nThis is a chapter."
  },
  {
    "objectID": "httr2.html#learning-objectives",
    "href": "httr2.html#learning-objectives",
    "title": "4  What is an API and how can I access one?",
    "section": "4.2 Learning Objectives",
    "text": "4.2 Learning Objectives\nDo LOs get their own subsection in each chapter?"
  },
  {
    "objectID": "httr2.html#prerequisites",
    "href": "httr2.html#prerequisites",
    "title": "4  What is an API and how can I access one?",
    "section": "4.3 Prerequisites",
    "text": "4.3 Prerequisites\nIt has prerequisites, maybe?"
  },
  {
    "objectID": "authentication.html#introduction",
    "href": "authentication.html#introduction",
    "title": "5  How do I prove that I’m me?",
    "section": "5.1 Introduction",
    "text": "5.1 Introduction\nThis is a chapter."
  },
  {
    "objectID": "authentication.html#learning-objectives",
    "href": "authentication.html#learning-objectives",
    "title": "5  How do I prove that I’m me?",
    "section": "5.2 Learning Objectives",
    "text": "5.2 Learning Objectives\nDo LOs get their own subsection in each chapter?"
  },
  {
    "objectID": "authentication.html#prerequisites",
    "href": "authentication.html#prerequisites",
    "title": "5  How do I prove that I’m me?",
    "section": "5.3 Prerequisites",
    "text": "5.3 Prerequisites\nIt has prerequisites, maybe?"
  },
  {
    "objectID": "automation.html#introduction",
    "href": "automation.html#introduction",
    "title": "6  How can I automate web API access?",
    "section": "6.1 Introduction",
    "text": "6.1 Introduction\nThis is a chapter."
  },
  {
    "objectID": "automation.html#learning-objectives",
    "href": "automation.html#learning-objectives",
    "title": "6  How can I automate web API access?",
    "section": "6.2 Learning Objectives",
    "text": "6.2 Learning Objectives\nDo LOs get their own subsection in each chapter?"
  },
  {
    "objectID": "automation.html#prerequisites",
    "href": "automation.html#prerequisites",
    "title": "6  How can I automate web API access?",
    "section": "6.3 Prerequisites",
    "text": "6.3 Prerequisites\nIt has prerequisites, maybe?"
  },
  {
    "objectID": "packages.html#introduction",
    "href": "packages.html#introduction",
    "title": "7  How can I wrap a web API into an R package?",
    "section": "7.1 Introduction",
    "text": "7.1 Introduction\nThis is a chapter."
  },
  {
    "objectID": "packages.html#learning-objectives",
    "href": "packages.html#learning-objectives",
    "title": "7  How can I wrap a web API into an R package?",
    "section": "7.2 Learning Objectives",
    "text": "7.2 Learning Objectives\nDo LOs get their own subsection in each chapter?"
  },
  {
    "objectID": "packages.html#prerequisites",
    "href": "packages.html#prerequisites",
    "title": "7  How can I wrap a web API into an R package?",
    "section": "7.3 Prerequisites",
    "text": "7.3 Prerequisites\nIt has prerequisites, maybe?"
  },
  {
    "objectID": "accessing-more.html#introduction",
    "href": "accessing-more.html#introduction",
    "title": "8  How can I learn more about accessing web APIs?",
    "section": "8.1 Introduction",
    "text": "8.1 Introduction\nThis is a chapter."
  },
  {
    "objectID": "accessing-more.html#learning-objectives",
    "href": "accessing-more.html#learning-objectives",
    "title": "8  How can I learn more about accessing web APIs?",
    "section": "8.2 Learning Objectives",
    "text": "8.2 Learning Objectives\nDo LOs get their own subsection in each chapter?"
  },
  {
    "objectID": "accessing-more.html#prerequisites",
    "href": "accessing-more.html#prerequisites",
    "title": "8  How can I learn more about accessing web APIs?",
    "section": "8.3 Prerequisites",
    "text": "8.3 Prerequisites\nIt has prerequisites, maybe?"
  },
  {
    "objectID": "part_creating.html",
    "href": "part_creating.html",
    "title": "How can I create my own APIs with R?",
    "section": "",
    "text": "TODO:\n\nConsider adding a chapter on securing APIs (or at least include it in deploy.qmd).\nSame for scaling. Scaling should almost definitely go inside deploy.qmd.\n\nThis is an intro to a part.\nThese are the chapters, introduced with a phrase that encapsulates them:\n\nDescribe the chapter. Reference it with a tag.\nDescribe another chapter. Reference it with a tag.\n\nAnd then a sentence or paragraph about any leftovers."
  },
  {
    "objectID": "plumber.html#introduction",
    "href": "plumber.html#introduction",
    "title": "9  How can I create my own APIs?",
    "section": "9.1 Introduction",
    "text": "9.1 Introduction\nThis is a chapter."
  },
  {
    "objectID": "plumber.html#learning-objectives",
    "href": "plumber.html#learning-objectives",
    "title": "9  How can I create my own APIs?",
    "section": "9.2 Learning Objectives",
    "text": "9.2 Learning Objectives\nDo LOs get their own subsection in each chapter?"
  },
  {
    "objectID": "plumber.html#prerequisites",
    "href": "plumber.html#prerequisites",
    "title": "9  How can I create my own APIs?",
    "section": "9.3 Prerequisites",
    "text": "9.3 Prerequisites\nIt has prerequisites, maybe?"
  },
  {
    "objectID": "deploy.html#introduction",
    "href": "deploy.html#introduction",
    "title": "10  How do I deploy my plumber API?",
    "section": "10.1 Introduction",
    "text": "10.1 Introduction\nThis is a chapter."
  },
  {
    "objectID": "deploy.html#learning-objectives",
    "href": "deploy.html#learning-objectives",
    "title": "10  How do I deploy my plumber API?",
    "section": "10.2 Learning Objectives",
    "text": "10.2 Learning Objectives\nDo LOs get their own subsection in each chapter?"
  },
  {
    "objectID": "deploy.html#prerequisites",
    "href": "deploy.html#prerequisites",
    "title": "10  How do I deploy my plumber API?",
    "section": "10.3 Prerequisites",
    "text": "10.3 Prerequisites\nIt has prerequisites, maybe?"
  },
  {
    "objectID": "test-plumber.html#introduction",
    "href": "test-plumber.html#introduction",
    "title": "11  How can I test my plumber API?",
    "section": "11.1 Introduction",
    "text": "11.1 Introduction\nThis is a chapter."
  },
  {
    "objectID": "test-plumber.html#learning-objectives",
    "href": "test-plumber.html#learning-objectives",
    "title": "11  How can I test my plumber API?",
    "section": "11.2 Learning Objectives",
    "text": "11.2 Learning Objectives\nDo LOs get their own subsection in each chapter?"
  },
  {
    "objectID": "test-plumber.html#prerequisites",
    "href": "test-plumber.html#prerequisites",
    "title": "11  How can I test my plumber API?",
    "section": "11.3 Prerequisites",
    "text": "11.3 Prerequisites\nIt has prerequisites, maybe?"
  },
  {
    "objectID": "creating-more.html#introduction",
    "href": "creating-more.html#introduction",
    "title": "12  How can I learn more about creating APIs?",
    "section": "12.1 Introduction",
    "text": "12.1 Introduction\nThis is a chapter."
  },
  {
    "objectID": "creating-more.html#learning-objectives",
    "href": "creating-more.html#learning-objectives",
    "title": "12  How can I learn more about creating APIs?",
    "section": "12.2 Learning Objectives",
    "text": "12.2 Learning Objectives\nDo LOs get their own subsection in each chapter?"
  },
  {
    "objectID": "creating-more.html#prerequisites",
    "href": "creating-more.html#prerequisites",
    "title": "12  How can I learn more about creating APIs?",
    "section": "12.3 Prerequisites",
    "text": "12.3 Prerequisites\nIt has prerequisites, maybe?"
  },
  {
    "objectID": "examples.html#introduction",
    "href": "examples.html#introduction",
    "title": "Appendix A — API Examples",
    "section": "A.1 Introduction",
    "text": "A.1 Introduction\nThis is an appendix."
  }
]